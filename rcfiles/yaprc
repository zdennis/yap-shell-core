#!/usr/bin/ruby

# world.addons[:'keyboard-macros'].disable!

old_world_envs = []
parse_env_vars_from_string = -> (str) {
  keys_and_values = str.split("\n").map(&:chomp).map do |line|
    next if line =~ /^\s*#/
    line.split('=', 2)
  end.compact

  keys_and_values.map! do |(key, value)|
    if value =~ /^['"]/
      [key, value.scan(/^['"](.*)['"]\s*$/).flatten.first]
    else
      [key, value]
    end
  end
}

load_dotenv_file = -> (file) {
  dotenv_file = Dir[file].first
  if dotenv_file
    old_world_envs.push world.env.dup
    Treefell['shell'].puts "loading dotenv file #{dotenv_file}"
    keys_and_values = parse_env_vars_from_string.call(IO.read(dotenv_file))

    keys_and_values.each do |(key, value)|
      next unless key
      next if key == 'RAILS_ENV'
      world.env[key] = value
    end
    Treefell['shell'].puts "done loading dotenv"
  end
}


Yap::Shell::Execution::Context.on(:after_execute) do |world, command:, **kwargs|
  if command.str == "nvm"
    old_nvm_bin = world.env["NVM_BIN"]
    Dir[ world.configuration.path_for("env/nvm.env") ].each do |file|
      if old_nvm_bin
        world.env["PATH"].sub!(/#{Regexp.escape(old_nvm_bin)}:/, '')
      end

      key_and_values = parse_env_vars_from_string.call(IO.read(file))
      key_and_values.each do |(key, value)|
        world.env[key] = value
      end

      nvm_bin = world.env["NVM_BIN"]
      if nvm_bin
        world.env["PATH"] = nvm_bin + ":" + world.env["PATH"]
      end
    end
  end
end

Yap::Shell::Execution::Context.on(:before_execute) do |world, command:|
  if command.str == "cd"
    if old_world_envs.any?
      world.env.replace(old_world_envs.first)
      old_world_envs.clear
    end
  end
end

Yap::Shell::Execution::Context.on(:after_execute) do |world, command:, result:|
  if command.str == "cd"
    load_dotenv_file.call('.env')
    load_dotenv_file.call('.env.local')
    rails_env = world.env['RAILS_ENV']
    if rails_env
      load_dotenv_file.call(".env.#{rails_env}")
    else
      load_dotenv_file.call(".env.development")
    end
  end
end

###############################################################################
#                         ENVIRONMENT VARIABLES
#------------------------------------------------------------------------------
# When yap boots up it constructs a world for the running shell. The world
# has it's own copy of environment variables. Below is an example of
# modifying your PATH environment variables.
world.env["PATH"] = [
  world.env["HOME"] + "/.rbenv/shims",
  "/usr/local/bin",
  world.env["PATH"]
].join(":")


###############################################################################
#                           SHELL HISTORY
#------------------------------------------------------------------------------
# Here's an example of resizing shell history to be of infinite size. If you
# set this to a numeric value then it will only maintain that many entries.
infinity = 1 / 0.0
world.history.resize(infinity)

func :reload! do |args:, stdin:, stdout:, stderr:|
  stdout.puts "Reloading shell:"
  stdout.print "  Saving history "
  world.addons[:history].save
  stdout.puts Term::ANSIColor.green("done")
  world.reload!
end


###############################################################################
#                         CONFIGURING YOUR PROMPT
#------------------------------------------------------------------------------
# Your prompt can be whatever you can code it to be. It can be static or
# or dynamic. You can also update the prompt indirectly so that it live
# updates regardless of if you hit enter.
#
# The easiest thing to do is to set the prompt to a static string, but it's
# also the least useful way to utilize your prompt, e.g.:
#
#   yap> world.prompt = 'my-prompt>'
#
# A more useful way to configure your prompt is by using a lambda/proc (or
# anything that responds to 'call'). This proc will be called whenever
# the prompt needs to be rendered, so it can be as dynamic as you like. Below
# is an example of setting a prompt with a bunch of git smarts.
#
# One other thing worth noting is that you can re-render the prompt without
# having to hit enter to run a statement. If this piques your interest check
# out the prompt_updates/ addon included in the yap-shell gem. It's in the
# YAP_SHELL_INSTALL_DIR/addons/promp_updates/ directory.
#
# Now, here's an example of a smart prompt with some git intelligence:

world.prompt = -> do
  # use ~ instead of full-path to home directory
  pwd = Dir.pwd.sub Regexp.new(ENV['HOME']), '~'

  # identify our current branch
  git_current_branch = `git branch 2>/dev/null | sed -n '/\* /s///p'`.chomp

  # is the current directory a part of a git enabled directory structure?
  current_dir_is_git_aware = git_current_branch.length > 0

  if current_dir_is_git_aware
    git_current_branch += " "

    # are there unstaged changes?
    git_dirty_not_cached = `git diff --shortstat 2>/dev/null`.length > 0

    # are there staged changes?
    git_dirty_cached = `git diff --shortstat --cached 2>/dev/null`.length > 0

    if git_dirty_not_cached || git_dirty_cached
      # uncommitted changes
      git_branch = intense_cyan(git_current_branch)
    else
      # no uncommitted changes
      git_branch = cyan(git_current_branch)
    end
  else
    git_branch = ""
  end

  # Example: ~/source/playground/yap master ➜
  "#{yellow(pwd)} #{git_branch}#{red('➜')} "
end

###############################################################################
#                            SECONDARY PROMPT
#------------------------------------------------------------------------------
# The secondary_prompt is equivalent to the PS2 prompt in bash. It is what
# is displayed when entering a multiline command. It can be set to a string
# or a proc. It defaults to '> '
#
# To see it in action, type "echo 'foo" with no completing single quote and
# hit enter.
self.secondary_prompt = '> '

###############################################################################
#                               KEYBOARD MACROS
#------------------------------------------------------------------------------
# Keyboard macros allow you to define key/byte sequences that run code
# when typed. Perhaps the simpest macro is one that takes the tediousness
# out of typing a long command. For example, pressing "Ctrl-g l" might
# type in "git log --name-status -n100" just as if the user had typed it.
#
# There are five things to know about macros in Yap:
#
# * Macros are initialized by a trigger key. The default is Ctrl-g.
# * Macros require at least one character/key/byte sequence beyond the trigger \
#   key in order to fire
# * Macros can be bound to code blocks or a string.
# * When a macro returns a string that string is inserted as user input \
#   at the current cursor position
# * When a macro returns a string that ends in a new line it will process the \
#   line as if the user hit enter
#
# == Example
#
#    world.addons[:'keyboard-macros'].configure(trigger_key: :ctrl_g) do |macros|
#      macros.define :z, 'git open-pull'
#      macros.define 'l', "git log -n1\n"
#    end
#
# It's a little bit wordy right now to setup because macros are not special
# in Yap. They are provided as a standard yap-addon. You could even provide
# your own macro addon replacement if you so desired.
#
# Following, are a few examples showcasing macros.
###############################################################################

# Sets the default trigger key for all keyboard macros
world.addons[:'keyboard-macros'].trigger_key = ?\C-g

# Sets the default cancel key (space) for all keyboard macros
world.addons[:'keyboard-macros'].cancel_key = " "

# Sets the default timeout for macros. When set to nil you will have to
# use the cancel key to exit out of macros.
world.addons[:'keyboard-macros'].timeout_in_ms = nil

# Forgiveness-mode: Automatically cancel if the sequence is unknown. When
# set to false you can keep attempting to type in your macro.
world.addons[:'keyboard-macros'].cancel_on_unknown_sequences = true

keyboard_macros = world.addons[:'keyboard-macros']
keyboard_macros.cycle(:recent_git_branches) { `git recent`.lines.map(&:chomp) }
world.editor.bind(:alt_up_arrow) do
  keyboard_macros.cycle(:recent_git_branches).next
end
world.editor.bind(:alt_down_arrow) do
  keyboard_macros.cycle(:recent_git_branches).previous
end

world.editor.bind(:ctrl_r) do
  world.addons[:'history-search'].prompt_user_to_search
end

# Or, you can set the trigger key for a particular set of macros
# by specifying it when you call .configure(...).
world.addons[:'keyboard-macros'].configure(trigger_key: ?\C-g) do |macro|
  macro.start do
    # TODO: FUTURE
    # world.editor.content_box.children = [
    #   TerminalLayout::Box.new(content: "am i floating1?", style: {display: :float, float: :right, height: 1, width: "am i floating1?".length}),
    #   TerminalLayout::Box.new(content: "What up12?", style: {display: :block}),
    #   TerminalLayout::Box.new(content: "Not much21", style: {display: :block}),
    #   TerminalLayout::Box.new(content: "am i floating3?", style: {display: :float, float: :left, height: 1, width: "am i floating1?".length}),
    # ]
  end

  macro.stop do
    world.editor.content_box.children = []
  end

  macro.define 'z', "git open-pull\n"
  macro.define 'abc', 'echo abc'
  macro.define 'u', -> { world.editor.undo }

  macro.define 'b' do |macro|
    macro.start { macro.cycle(:recent_git_branches).reset }

    macro.cycle(:recent_git_branches) { `git recent`.lines.map(&:chomp) }
    macro.fragment :up_arrow, -> { macro.cycle(:recent_git_branches).next }
    macro.fragment :down_arrow, -> { macro.cycle(:recent_git_branches).previous }
  end

  macro.define 'l', 'git log ' do |macro|
    macro.fragment 'n', '--name-status '
    macro.fragment 'm', 'master..HEAD '
    macro.fragment 'o', '--oneline '
    macro.fragment /\d/, -> (a) { "-n#{a} " }
  end

  macro.define 'd', 'git diff ' do |macro|
    macro.fragment 'n', '--name-status '
    macro.fragment 'm', 'master..HEAD '
    macro.fragment 'o', '--oneline '
    macro.fragment /\d/, -> (a) { "-n#{a} " }
  end
end

# The below macro shows that you can have macros start with a different
# trigger keys.
# world.addons[:'keyboard-macros'].configure(trigger_key: :ctrl_h) do |macros|
#   macros.define 'h123', -> {
#     box = TerminalLayout::Box.new(content: "Right?", style: { display: :block, float: :right, height: 1, width: 50 })
#     world.editor.content_box.children = [box]
#     'echo this was with a code block'
#   }
# end


###############################################################################
#                          USER-DEFINED FUNCTIONS
#------------------------------------------------------------------------------
# User-defined functions can be accessed in the shell like any command. They
# take precedence over programs found on the file-system, but they do not
# take precedent over user-defined aliases.
#
# For example, take `upcase` below:
#
#    func :upcase do |stdin:, stdout:|
#      str = stdin.read
#      stdout.puts str.upcase
#    end
#
# You can issue "upcase" in the shell where-ever you'd expect to place the name
# of a command.
#
# == Function Parameters
#
# User-defined functions can receive the following arguments:
#
#  * command: the name of the command the user-entered
#  * args: the list of arguments supplied to the command
#  * stdin: the way to access stdin (e.g. DO NOT CALL STDIN or $stdin)
#  * stdout: the way to access stdout (e.g. DO NOT CALL STDOUT or $stdout)
#  * stderr: the way to access stderr (e.g. DO NOT CALL STDERR or $stderr)
#  * world: the Shell's currently known world
#
# These arguments are all optional. You only need to specify what your
# function is going to use.
#
# Following, are a number of examples showcasing their power and flexibility.
###############################################################################

# upcase is reads from stdin and upcases every letter.
#
# Example:
#   yap> echo "hi there" | upcase
#   HI THERE
func :upcase do |stdin:, stdout:|
  str = stdin.read
  stdout.puts str.upcase
end

func :'run-modified-specs' do |stdin:, stdout:|
  str = `git status`
  files = str.scan(/\S+.rb/)
  specs, non_specs = files.partition { |file| file.match(/\S+_spec.rb/) }
  non_specs.each do |non_spec|
    filename_without_extension = non_spec.gsub(/^[^\/]+\//, '').gsub(/\.rb$/, '')
    specs.concat Dir["spec/**/*#{filename_without_extension}_spec.rb"]
  end

  cmd = "bundle exec rspec #{specs.join(' ')}"
  stdout.puts cmd
  shell cmd
end

# This shell function uses a  Regexp to match on a command of 2 or more dots.
# It's for traversing up N directories. Two dots ("..") is the minimum and
# is used to go to the parent. Every dot after that goes up one more directory
# level.
#
# Example:
#   ~/foo/bar/baz> ..
#   ~/foo/bar> ...
#   ~/
func /^\.{2,}$/ do |command:|
  (command.length - 1).times { Dir.chdir("..") }
end

func /^\+(.*)/ do |command:, args:|
  puts command
  puts args.inspect
end

# This shell function uses a custom object that responds to the #match(...)
# method. This is nothing more than an basic "history" implementation.
#
history_matcher = Object.new
def history_matcher.match(command)
  command == ".h"
end

# Allows for a single numeric argument which will be used to determine
# how many history items to show (not including this command). If no argument
# if provided then it will show the entire shell history.
func history_matcher do |world:, args:, stdout:|
  num_commands = args.first.to_i
  num_commands = world.history.length - 1 if num_commands == 0
  history_size = world.history.length
  world.history[-(num_commands + 1)...-1].each_with_index do |command, i|
    position = history_size - num_commands + i
    stdout.puts "    #{position}   #{command}"
  end
end
